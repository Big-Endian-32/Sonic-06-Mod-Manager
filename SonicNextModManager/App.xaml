<Application x:Class="SonicNextModManager.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:SonicNextModManager"
             xmlns:converters="clr-namespace:SonicNextModManager.UI.Converters"
             StartupUri="UI/SetupWindow.xaml"
             ShutdownMode="OnExplicitShutdown">
    
    <Application.Resources>
        
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>

                <!-- Load language data -->
                <ResourceDictionary Source="Resources/Languages/Languages.xaml"/>
                <ResourceDictionary Source="Resources/Languages/en-GB.xaml"/>

                <!-- Load theme data for style overrides -->
                <ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/SkinDefault.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/Theme.xaml"/>

                <!-- Set up HandyControl theme -->
                <hc:Theme AccentColor="{x:Static SystemParameters.WindowGlassColor}" Skin="Dark"/>

            </ResourceDictionary.MergedDictionaries>

            <!-- Set up converters -->
            <converters:InstallStateToVisibilityConverter x:Key="InstallStateToVisibilityConverter"/>
            <converters:MultiplyConverter x:Key="MultiplyConverter"/>

            <!-- Font used for displaying icons with text -->
            <FontFamily x:Key="MaterialIcons">pack://application:,,,/Resources/Fonts/#Material Icons</FontFamily>

            <!-- Inherit Windows accent colour for tab items -->
            <Style x:Key="TabItemInLineAccentColour" BasedOn="{StaticResource TabItemInLine}" TargetType="hc:TabItem">
                <Setter Property="BorderBrush" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
            </Style>

            <!-- Use Control colour for foreground -->
            <Style TargetType="TextBlock">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- Expander reveal template -->
            <ControlTemplate x:Key="RevealExpander" TargetType="{x:Type Expander}">
                <DockPanel>
                    <ScrollViewer x:Name="ExpanderContentScrollView" DockPanel.Dock="Bottom">
                        <ScrollViewer.Tag>
                            <system:Double>0.0</system:Double>
                        </ScrollViewer.Tag>
                        <ScrollViewer.Height>
                            <MultiBinding Converter="{StaticResource MultiplyConverter}">
                                <Binding Path="ActualHeight" ElementName="ExpanderContent"/>
                                <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                            </MultiBinding>
                        </ScrollViewer.Height>
                        <ContentPresenter x:Name="ExpanderContent" ContentSource="Content"/>
                    </ScrollViewer>
                </DockPanel>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView" Storyboard.TargetProperty="Tag" To="1" Duration="0:0:0.2"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView" Storyboard.TargetProperty="Tag" To="0" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            
            <!-- Slimmer GridViewColumnHeader style -->
            <Style x:Key="SlimGridViewColumnHeader" TargetType="GridViewColumnHeader">
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="Padding" Value="13,0,0,0"/>
                <Setter Property="MinHeight" Value="22"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <hc:SimplePanel SnapsToDevicePixels="true">
                                <Border x:Name="HeaderBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                                    <ContentPresenter x:Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <Canvas>
                                    <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}"/>
                                </Canvas>
                            </hc:SimplePanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Slimmer ListViewItem style -->
            <Style x:Key="SlimListViewItem" TargetType="ListViewItem">
                <Setter Property="Background" Value="#202020"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="Margin" Value="0,0,0,4"/>
                <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}"/>
                <Setter Property="MinHeight" Value="22"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListViewItem">
                            <Border CornerRadius="4" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Background" Value="#4D4D4D"/>
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#777777"/>
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="true"/>
                            <Condition Property="Selector.IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <!-- ProgressButtonPrimaryHorizontalFirst -->
            <Style x:Key="ProgressButtonPrimaryHorizontalFirst" BasedOn="{StaticResource ToggleButtonGroupItemHorizontalFirst}" TargetType="hc:ProgressButton">
                <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                <Setter Property="ProgressStyle" Value="{StaticResource ProgressBarFlat4ProgressButton}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="hc:ProgressButton">
                            <Border x:Name="Chrome" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                                <hc:SimplePanel>
                                    <ProgressBar x:Name="ProgressBar" Height="Auto" Value="{TemplateBinding Progress}" Maximum="100" Visibility="Collapsed" Style="{TemplateBinding ProgressStyle}"/>
                                    <ContentPresenter Name="UnCheckedElement"  Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}"/>
                                </hc:SimplePanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" Value="Visible" TargetName="ProgressBar"/>
                                    <Setter Property="Visibility" Value="Visible" TargetName="CheckedElement"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- ProgressButtonPrimaryHorizontalLast -->
            <Style x:Key="ProgressButtonPrimaryHorizontalLast" BasedOn="{StaticResource ToggleButtonGroupItemHorizontalLast}" TargetType="hc:ProgressButton">
                <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                <Setter Property="ProgressStyle" Value="{StaticResource ProgressBarFlat4ProgressButton}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="hc:ProgressButton">
                            <Border x:Name="Chrome" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                                <hc:SimplePanel>
                                    <ProgressBar x:Name="ProgressBar" Height="Auto" Value="{TemplateBinding Progress}" Maximum="100" Visibility="Collapsed" Style="{TemplateBinding ProgressStyle}"/>
                                    <ContentPresenter Name="UnCheckedElement"  Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}"/>
                                </hc:SimplePanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" Value="Visible" TargetName="ProgressBar"/>
                                    <Setter Property="Visibility" Value="Visible" TargetName="CheckedElement"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>

    </Application.Resources>
    
</Application>
